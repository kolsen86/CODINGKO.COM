<head>
	<% title "The Who, What, When, Where, Why, and How's of CSS" %>
	<% description 'A close examination of everything about CSS.  From what it is used for to how it works to the best places to learn it.  Also, a tutorial on the bare minimum of CSS you need to know to create a basic web page.' %>
	<% keywords 'codingko, web development, computer programming, development, programming, tutorials, web development tutorials, html, css, javascript, ruby, ruby on rails, python' %>
</head>

<div class="css-body">
    <header>
        <h1 id="css-head">The Who, What, When, Where, Why, and How's of CSS</h1><br>
        <h4 id="css-by">By: Kenneth Olsen</h4>
    </header>

    <p id="css-intro">Hello! Welcome two part 2 of the "Who, What, When, Where, When, Why, and How's of Programming".  Last time, we took a deep dive into HTML and learned, in depth, all about it.  From who created it, to how it works, to the best places to learn it.  This week, we are going to take a look at the second pillar of the internet, CSS.  Now that introductions are out of the way, LET'S GET GOING!</p><br>

    <h2>What is CSS?</h2>

        <p>
            CSS stands for Cascading StyleSheets.  It is used for describing the presentation of a document written in HTML.  If you remember from part 1 in the Who, What, Where, When, Why, and How's of Programming, which was about HTML, I used the metaphor for the big 3 pillars of the internet (HTML, CSS, JavaScript) being like a house.  The HTML was the foundation and structure, or the 2x4's and concrete slab.  JavaScript was the electrical and wiring, making the house dynamic.  Just as JavaScript makes websites dynamic by adding things such as forms, user profiles and anything else that gives it functionality.  Finally, the CSS was the paint, decorations, and furnishings.  It is the presentation of the structure of the house.  Just as CSS is the presentation of the HTML of a website.  CSS is every color, font-size, border, and background-image, as well as pretty much anything else that could be considered a decoration or style.  CSS also positions your HTML elements and makes websites responsive (mobile-friendly).  As you can see, CSS is very important to the internet we know and love today.
        </p>

    <h2>Who created CSS?</h2>

        <p>
            Hakon Wiiam Lie is credited with creating CSS.  Though Wiiam Lie is credited as CSS's creator, he had help from many others, including the Godfather of the internet itself and the creator of HTML, Tim Berners-Lee.
        </p>

    <h2>When was CSS created?</h2>

        <p>
            CSS was first proposed in 1994, and was first released in 1996.  There are 3 levels of CSS that were released in that time(CSS, instead of coming out with new versions, comes out with new levels.  Each new level just adds to what is already there from the previous level.).  The original CSS in 1996, CSS2 in 1997, and the most current level, CSS3, which was drafted in 1999.  We may be stuck with CSS3 for awhile because it seems that the people responsible for CSS, the World Wide Web Consortium, may not be releasing new levels of CSS anymore.  There will be, however, level 4 selectors, some of which are already in use.  Instead of releasing new levels, they will just be continuously releasing a steady stream of new selectors, as they become available.
        </p>

    <h2>What iss CSS used for?</h2>

        <p>
            As we have already mentioned, CSS is used to describe the presentation of a web page (HTML).  CSS also has some other VERY important functions though.  It is used for positioning your HTML elements, which helps with your sites accessability.  CSS also plays a big role in making your web site responsive (mobile-friendly) through the use of media queries.  CSS's uses in these areas may actually be more important than it's ability to decorate your web page with different colors, fonts, borders, and the like.
        </p>

    <h2>Why use CSS?</h2>

        <p>
            As with HTML, you use CSS because you don't really have another option.  There are CSS preprocessors, which we will cover shortly, that can give your CSS added functionality, but even with these preprocessors you are still writing CSS in the end.
        </p>

    <h2>How does CSS work?</h2>

        <p>
            CSS, like HTML, is a set of instructions for your web browser.  These instructions, or rules, can be written either in-line with style tags. &lt;span style="color:red;"&gt;<span style="color:red;">(Now my text is Red).</span>  It can also be written internal.  Internal CSS is written in between the opening and closing HTML head tags.  Lastly, and the most preferred way to write your CSS, is in an external stylesheet, which is linked to in the head of your document.  External stylesheets are preferred because putting your CSS inline or in the head of your document can make your HTML look very cluttered and hard to understand.  You want to make sure everything is as easy to understand as possible, so that if another web developer, or even yourself, wants to come along and view the source or make corrections, your source code will be easy to navigate.  After you have written your CSS and are ready to view your website online, your CSS file will give instructions to your web browser to update the HTML on your webpage according to the values you wrote in your CSS.  In order to create a CSS value, or rule, you need to use what is called a CSS selector.  A CSS selector is a special ID or class that you specified in your HTML. An example of this is,

            <img src="https://res.cloudinary.com/dmks1qdth/image/upload/v1539100311/idandclass.png" alt="An example image of assigning CSS id's and class selectors">
            
            That example takes an h1 HTML element!!!!!!!!!!!!!!!!!!!!!!!!!  For styling a single HTML element you will want to use the id selector 'id="idSelector"' on your HTML element and in your CSS file you call that id by using an octothorpe "#" before the name of the selector.  In this case it would look like #idSelector {color: someColor;}.  If you want to style multiple elements than use the HTML class selector 'class="classSelector"' and in your CSS file you will put a period "." before calling your class name.  In thins case it would be .classSelector {color: someColor;}.  There are many other types of CSS selectors, these are just the 2 that are used most often.  You can specify a type of HTML element such as "span" in your CSS file and the rules you set will apply to every "span" in your document or to style all HTML elements you can put "*", and every single HTML element will be styled according to the rule you set for it.
        </p>
            
    <h2>What are the most important things to know about CSS?</h2>
    
        <h3>Responsive Design with CSS</h3>

            <p>
                In todays world, it is extremely important to optimize your web application for ALL devices and device sizes.  Almost half of all internet traffic is through smart-phones and tablets!  If your website is not mobile friendly, then you are going to miss out on A LOT of traffic.  CSS play a pivotal role in mobile responsiveness through the use of media queries and breakpoints.  (Just a shameless plug, but make sure you frequent codingko.com, as in the coming weeks I will be doing a full tutorial on responsive design).  A brief explanation of media queries is that, through the use of a CSS media query selector, you can change anything you want oon your webpage in order to make sure that it can be viewed on multiple devices.  Here is an example of media queries in action, !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                Pretty cool, am I right?
            </p>

        <h3>Animation with CSS</h3>

            <p>     
                It used to be, that if you wanted to use animations on your website, you would have to use JavaScript.   While this is still true to a certain extent, for simpler animations you can now use CSS.  To use CSS to make animations, you need to use the CSS @keyframe selector.

                !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            </p>

        <h3>Accessibility with CSS</h3>
        
            <p>
                Arguably the biggest role CSS plays in web development, other than decorating HTML, is with accessibility.  If it hasn't been drilled into your head yet, accessability is extremely important.  Everyone, no matter if they have a disability or not, should be able to enjoy all the information, knowledge, opinions, entertainment, and cat memes available online.  One of the ways CSS assists with accessibility is through the use of external stylesheets.  By linking to your CSS externally in the head of your HTML, you can make it much easier for screen reading devices to navigate your website.  Inline CSS clutters up your HTML and can trick screen readers into reading your CSS rules instead of your actual content.  This not only helps people with disabilities, but also can help you, or another web developer, if they or you need to sift through your source code for any reason.  So, this is yet another great reason to link externally to your CSS stylesheet.
            </p>
            <p>
                CSS can also help with accessibility by allowing you to precisely control word, letter, and line spacing.  As well as font size, weight, color, and a multitude of other things that can help the visually impaired enjoy your content.  Back in the old days, CSS was strictly used for decoration.  Web developers, at the time, used HTML tables to position much of their content.  HTML tag misuse, such as the prior table example, makes it nearly impossible for screen reading devices to navigate your content.  Screen readers are just machines that read whatever the computer is telling it to read.  So, if you use a table to position elements, what do you think happens?  That's right!  It will read the content in that HTML table as though it was in an actual table.  Always use CSS for positioning your HTML elements.  Use the HTML tags for what they were made for and everyone will be able to enjoy your content.
            </p>
            <p>
                Both HTML and CSS have many more accessability features.  I have only listed some of the bigger ones in order to keep this as brief as possible.  However, in the coming weeks, I will be doing a full blown explanation and tutorial on accessability.  So make sure you stay tuned to codingko.com to learn all about it.  I would be remiss, however, if I did not mention the World Wide Web Consortium.  They are responsible for coming up with all the web standards in use today, including accessability standards.  So, if you want to read up more on accessability right now, visit the <a href="https://www.w3.org/" target="_blank" rel="noopener">World Wide Web Consortium</a> at their website and learn all about it.  Don't worry about me, I will be right here when you get back.
            </p>

    <h2>What is the very minimum amount of CSS needed to create a basic website?</h2>

            <p>
                Technically speaking, you could create an entire website with any CSS at all.  That website, however, woudl not look or perform very well at all.  For the most part, though, we have already covered the minimum amount of CSS you would need to know to create a very basic website.  For the sake of continuity, we will run down the list and add a few more things.
            </p>
            <p>
                The very first thing you should know about CSS to create a basic website is how to create and link to an external stylesheet.  If you need a quick refresher, all you need to do is create a separate file inside the same directory as your HTML file.  Let's just name ours styles.css.  Now that you have created your separate stylesheet, you need to link to it in between the opening and closing head tags in your HTML.  Here is a short example,
                
                !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            </p>
            <p>
                The next thing you should know about CSS to get a website, with some basic styling, up and going is the CSS syntax to use in that separate stylesheet. (The same syntax applies for inline CSS, but we want it to be good for accessability, RIGHT?  Same syntax applies for internal CSS as well.  You remember, that was the rules inside the head of your HTML.)  

                !!!!!!!!!!!!!!!!!!!!!!!SHOW FULL STYLESHEET EXAMPLE, LIKE YOU DID WITH HTML!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            </p>
            <p>
                You will also want to know about the different types of CSS selectors and how to use them.  The most commonly used selectors are, in order of specificity (HOLY CRAP!!  I can't believe I haven't mentioned this yet, but the reason it's call "CASCADING Stylesheets" is because the CSS rules cascade downward.  Meaning if an HTML element falls under multiple CSS rules, the selector that is more specific to that element wins.  "." class selector is more specific than "*" universal selector, "#" id selector is more specific than "." class selector, etc.) the universal selector "*" which is an asterisk will style allll of the HTML elements.  The type selector is the next most specific.  To use the type selector you just put the type of HTML you want to style.  Some HTML element types include H1-H6, div, span, p, etc.  The class selector ".", which is a period or decimal point, is the next most specific CSS selector.  With the class selector, you can style any number of HTML elements as long as you have assigned those elements a class name in your HTML.  In order to assign a class to your HTML elements you need to first know which elements you are going to style.  Then, inside the opening and closing brackets of the opening tag of the HTML element you want to style just type class="yourClassName" and BOOM, you just assigned a class to an element.  Now you can assign that same class to as many elements as you want and they will all be styled the same.  The last selector that I am going to talk about is the id selector and it is the 4th most specific of the selectors.  The process of assigning a CSS id selector is exactly the same as the class selector, with one difference.  You can only use an id selector on 1 HTML element.
            </p>

            <p>
                So, know you know about the CSS selectors, but what do you do with them after you assign them in your HTML and put them down in your stylesheet?  You need to set your CSS rules with CSS properties.  Here is a list of some of the more commonly used CSS properties and some examples of the kinds of values you can assign to them.
                !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                !!!!!!!!!!!!!!!!!!!!!!!!!! TALK ABOUT BOX MODEL  LOOK UP THE DEFAULT PADDING AND MARGIN!!!!!!!!!!!!!!!!!!!!!!
            </p>

    <h2>Are there any alternatives to CSS?</h2>

            <p>
                As with HTML, there are no real alternatives to CSS for web development.  Also like HTML, there are extensions to CSS called CSS preprocessor.   These preprocessor allow you more control over your CSS by giving you the ability to do things such as nesting rules!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                A couple of the more notable CSS preprocessors include Sass, Less, and Stylus.
            </p>

    <h2>What other things about CSS should I know or are notable?</h2>

            <p>
                One of the most helpful developments in web development in recent years is the creation of frameworks.  There are hundreds of frameworks available for web development for just about every programming language you can think of.  The frameworks available for HTML/CSS are some of the most popular among web developers for a number of different reasons, which we will get into right now.
            </p>

        <h3>CSS/HTML Frameworks</h3>

            <h4><a href="https://getbootstrap.com/" target="_blank" rel="noopener">Twitter's Bootstrap</a></h4>

                <p>
                    By far the most popular and widely used CSS/HTML framework is Bootstrap by Twitter.  Bootstrap is, what is called, a mobile first framework.  A mobile first framework sets certain parameters for you by default to make   sure your website looks good on all devices.  This makes developing mobile apps or responsive websites much    easier and more efficient.
                </p>

            <h4><a href="https://foundation.zurb.com/" target="_blank" rel="noopener">Foundation By: Zurb</a></h4>

                <p>
                    The next framework I am going to talk about has been riding Bootstraps coat tails for a long time.  Many web developers swear by it, but it's popularity has never been able to catch up with Twitter Bootstrap.  This does not mean it is not as good as Bootstrap though, just a bit less popular.  The framework I speak of is Foundation by Zurb.  Zurb is a Facebook company, so you know with a massive corporation, such as FaceBook, behind it that it is going to have some nice features and some great documentation.  Foundation, like Bootstrap, is a mobile first framework and offers a comparable amount of components and features as Bootstrap.  One of the main features that set Foundation apart from Bootstrap is its grid system.  While many web developers prefer Bootstraps Flex-Box grid system, there are many others that prefer Foundations X Y grid system.  The developers that use Foundation say that the X Y grid system is much more flexible than the Flex-Box grid, thus giving you the ability to make your website really stand apart from other "Bootstrap looking" websites.  The ability to customize your website with the X Y grid can also be viewed as a minor drawback as well though.  Bootstrap's Flex-Box setup is considered much more beginner friendly than the X Y grid that Foundation uses.  However, Bootstrap's grid seems to make all of the websites built with it look somewhat similar.  That is not as much of an issue with Foundation, as the amount of customization can truly make your website stand apart from others. 
                </p>

            <h4><a href="http://getskeleton.com/" target="_blank" rel="noopener">Skeleton.ui</a></h4>

                <p>
                    If you want a truly customizable CSS/HTML framework, than look no further than Skeleton.UI.  Skeleton.UI is a tiny framework compared to the other 2, which means better performance for your website.  Skeleton.UI is also a mobile first framework and many of the bells and whistles that the other frameworks come with can be added.  It also lacks many of the constraints that the other 2 frameworks put on web developers, making it highly customizable.  The biggest drawback of Skeleton.UI is that it does not scale well, so it should only be used on smaller projects.  It's perfect for a beginner web developer that is just starting out though.
                </p>

                <p>
                    There are many more HTML/CSS frameworks available for web developers, and more are getting made weekly.  This was just a list of some of the more popular ones.  As with anything, the best way to find your perfect framework, is to get out there and give some of them a try.  <a href="https://github.com/troxler/awesome-css-frameworks" target="_blank" rel="noopener">Here</a> is a list of other CSS frameworks to check out and go experiment with.
                </p>

        <h3>CSS Tools</h3>

            <p>
                There is an abundant amount of free CSS tools and generators available for free online, to assist you with a number of tasks.  I am only going to cover a few of them.  As with everything else, get out there and experiment with some of them.  A big part of web development is a web developers "Toolbag", which are just different tools to make your life easier as an aspiring web developer.
            </p>

            <h4>CSS Tools for Colors</h4>

                <p>
                    One of the main CSS tools you will use, and use a lot, are CSS color pickers.  A color picker is a simple tool, but a vital one.  Many of them have a simple "point and click" interface that allow you to pinpoint the exact color you want to use.  Then there are others that offer many additional features to help you pick the perfect color.  There are hundreds of color pickers available free online or for download and many code editors come with them right out of the box or as extensions, so you don't even have to leave your editor to find the perfect color.  I have listed some of the better ones in the "Useful Tools" section of codingko.com.  So, <a href="/csstools" target="_blank">head on over there</a> and have a look.
                </p>

            <h4>CSS Gradient Generators</h4>

                <p>
                    First off, if you don't know what a gradient is, then Google it really quick, because I am unsure of how to go about explaining it.  Anyways, gradient generators allow you to create, usually, linear and radial gradients for your website by picking out a few colors on a color picker and then picking the points that you want the colors to start mixing and changing.  After you picked your colors and the points and have a gradient that you want to use, the generator will generate the CSS rules for you to just copy and paste right into your stylesheet.  There are a large amount of gradient generators available online, but I have already covered a few of them in the CSS Tools page here on codingko.com.  If you want to take a look at some of the better ones that I have found just click <a href="/csstools">this link</a> and have a look.
                </p>

                <p>
                    There are a huge amount of other color tools available for CSS online.  I have barely started to scratch the surface here.  The best way to find them is to just Google CSS tools and take a look around, or, once again, you can go take a look at the <a href="/csstools">CSS Tools page</a> of codingko.com, where I am adding new tools weekly. 
                </p>

            <h4>CSS Preprocessors</h4>

                <p>
                    Nowadays, if you don't know how to use at least one or two CSS preprocessors you are considered a dinosaur.  ALLLLLLLL of the cool kids are using them now.  Learning a CSS preprocessor is starting to become almost as important as learning plain CSS.  I am only briefly going to touch on a few of the more popular ones, but sometime in the near future I will be giving some of them their own "Who, What, Where, When, Why, and How's of Programming" article.
                </p>

                <h5>CSS Preprocessor: <a href="https://sass-lang.com/" target="_blank" rel="noopener">Sass</a></h5>

                    <p>
                        Sass stands for "Syntactically Awesome Stylesheets" and hails itself as "The most mature, stable, and powerful professional grade CSS extension language in the world".  It has been around for 11 years and during that time has amassed, probably, the largest user group out of all the preprocessors.  Sass allows you to do quite a few different things to extend the capabilities of CSS such as, using variable in your CSS, nesting your rules, and a sort-of function calling ability called mixins.  Also, if you know CSS than you already know Sass, at least as far as the syntax.  To really take advantage of Sass, you need to know how to use some of the features listed above, as well as it's many other features.  Good thing it has a large vibrant community around it!  Sass's large community has created hundreds of tutorials and created some great documentation.  So, learning Sass should be a breeze.
                    </p>

                <h5>CSS Preprocessor: <a href="http://lesscss.org/" target="_blank" rel="noopener">Less</a></h5>

                    <p>
                        Less stands for "Leaner Stylesheets" and is the second most famous CSS preprocessor and offers much of the same functionality as Sass.  Actually, as far as I can tell, functionally, they are pretty much the same.  The only real differences are that Sass is written in Ruby and Less is written in JavaScript.  Also when assigning and using variables you have to put a "$" for Sass and with Less you have to put "@".  Other than that they allow you to do all the same things.  Don't take my word for it though, go test them out for yourself.
                    </p>

                <h5>CSS Preprocessor: <a href="http://stylus-lang.com/" target="_blank" rel="noopener">Stylus</a></h5>

                    <p>
                        Stylus offers all of the same features as the other two plus a few additional features.  Those additional features, however, are pretty advanced, so Stylus is not recommended for beginners.  One of those features is the ability to call functions.  The other 2 preprocessors allow this as well, but Stylus takes it a bit farther.  With Stylus you can create the type of functions you would find in an actual programming language.  Things like conditional statement and loops.  If you are already comfortable with those things, then Stylus might be a good option for you, as it is probably the most powerful preprocessor out of the 3.
                    </p>

                    <p>
                        There are many other tools available for CSS onl;ine.  Everything from @keyframe animation generators to full libraries of animation ready for you to use.  There are CSS minifiers to eliminate the white-space from your stylesheets and make them take up less space.  There are media query generators where you just copy and paste your code into it and it will generate the media queries for all the popular screen sizes.  There are color pallette generators where you pick out a color or 2 you know you want to use and it generates a list of complimentary colors.  Really, the list is endless as far as CSS tools go.  I said it before and I will say it again.  The best way to find the perfect tools for your web developer toolbag is to Google CSS tools and browse, or check out the <a href="/tools">"Useful Tools"</a> section of codingko.com, where I keep a regularly updated list of the best tools I have found for multiple language, including <a href="/csstools">CSS</a>.
                    </p>

    <h2>What are the best resources available for learning CSS?</h2>

                    <p>
                        There are many, many, many resources available online for learning CSS.  We will cover the top 3 in a moment.  First, I want to tell you about the absolute, 100%, best way to learn CSS (or anything for that matter) is to do!!!  So, learn a bit from these tutorials, then pick a website that you think looks pretty cool.  After you find a website that you think looks fresh (Kids still say fresh, right...?) try to recreate with only CSS and HTML.  I promise you, you will learn faster doing this than if you did 100 tutorials.  That being said, let's take a look at the top 3 resources to get you started with learning CSS.
                    </p>

                    <p>
                        As a quick side note.  Since HTML and CSS go hand in hand, the best resources for learning them are the same.  I wanted to try to make them all different, but the following tutorials and courses are too good not to put on here for CSS.  I promise you, in the future, I am going to try to make these resources different for each language, unless the resource is exceptional at multiple languages.  My apologies.
                    </p>

            <h3><a href="https://www.codecademy.com/" target="_blank" rel="noopener">CodeAcademy</a>: CSS Course</h3>

                <p>
                    For a beginner to computer programming or web development, CodeAcademy is one of the absolute best resources.  They offer beginner courses, for free, in many different programming languages and technologies, including CSS.  CodeAcademy assumes no prior knowledge of the language you want to learn, so you are learning everything from the very beginning.  As you progress in their course, they will start to hold your hand less and less.  Before you know it, you will be able to style a website pretty confidently by yourself.  CodeAcademy does offer 2 paid services as well.  A Pro version of their curriculum, which takes you through some more advanced features of CSS (or whatever language you are trying to learn), and a pro intensive program that is more like an actual college course.  The pro intensive course gives you additional content, a structured syllabus with deadlines, access to their Slack channel where you can ask questions to your peers or the moderators.  You also get to take quiz's and complete mini-projects as well as a few cumulative projects that get reviewed from professional developers.  Both the Pro plan and the Pro Intensive plan offer certificates of completion as well.  The Pro plan will cost you $20 a month and the Pro Intensive is a 1 time $199 dollar payment.  Those are pretty hefty prices and I believe, if you are truly focused and want to learn the material, that you are more than capable of learning everything you need to know online for FREE!  You just have to know where to look, and that's what I am here to help you with.  If you feel more comfortable in a more structured learning environment and have the money, though, then by all means check out their paid subscriptions. 
                </p>

            <h3><a href="https://www.w3schools.com/" target="_blank" rel="noopener">W3 Schools</a></h3>

                <p>
                    As I said in the "Who, What, Where, When, Why, and How's of HTML", I view W3 Schools more as reference material than a tutorial or course.  Don't get me wrong, W3 Schools is a fantastic resource and a great place to go for reference material when your stuck on something.  As a matter of fact, it is the first place I would recommend to look when your stuck on something related to HTML, CSS, or JavaScript.  It's just that W3 Schools doesn't go to in depth with anything and isn't really structured well as a course or tutorial.  That being said, W3 Schools is perfect for learning HTML and CSS as these technologies don't have a lot of "in depth" things to cover.  Learning CSS with W3 Schools is great, seeing as though CSS is basically just styles.  On their website they cover every selector and property that you would ever need to know about and they give you a "playground" area where you can test out all of it. 
                </p>

            <h3><a href="https://css-tricks.com/" target="_blank" rel="noopener">CSS-Tricks</a></h3>

                <p>
                    The only one on this list that is different than the HTML article, CSS-Tricks is an amazing website and learning resource.  The CSS-Tricks staff and users are always publishing new and interesting ways to use CSS for your projects.  Before journeying off to CSS-Tricks, though, I would recommend completing at least the CodeAcademy CSS course.  Much of the material and tutorial on CSS-Tricks involves some more advanced CSS techniques and a lot of mixing different properties and values, so as a beginner, it could get quite confusing.  After you have laid a solid foundation for understanding CSS through CodeAcademy or another resource, than you can learn some pretty amazing things from CSS-Tricks.  Even if your a seasoned web developer, I would recommend bookmarking CSS-Tricks or signing up for their newsletter because they are usually on the up and up with any new CSS selectors coming out and which browsers support them as well as always publishing new material for their readers.  CSS-Tricks is one of my personal favorites because every single time I visit the site I leave having learned something new.
                </p>

            <p>
                There you have it!!!  The "Who, What, Where, When, Why, and How's of CSS".  I hope you learned something new today.  Come back to codingko.com next week as we finish out the big three pillars of the internet and take a look at the "Who, What, When, Where, Why, and How's of JavaScript".
            </p>

            <p>
                I would also like to say thank you sooo much for visiting codingko.com.  It really means a lot to me to know that I am helping someone else.  If you have ANY questions at all for me, or want to bring up a concern to me, or criticize me, tell me I have something wrong, or just to say "Hi", please do not hesitate to <a href="/contact-me">contact me</a>.  I promise I will get back to you in a timely fashion and I would love to hear from you.  Also, if you have a language or technology you would like to see covered here, shoot me an E-mail and I will try my best to make it happen.
            </p>

            <p>
                I HOPE YOU HAVE A GOOD ONE, AND I WILL SEE YOU NEXT WEEK!!
            </p>

            







    
    
        
